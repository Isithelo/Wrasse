var express = require('express');
var path = require('path');
var logger = require('morgan');
var compression = require('compression');
var methodOverride = require('method-override');
var session = require('express-session');
var flash = require('express-flash');
var bodyParser = require('body-parser');
const { check, validationResult } = require('express-validator');
var dotenv = require('dotenv');
var exphbs = require('express-handlebars');
var mongoose = require('mongoose');
var passport = require('passport');
var recaptcha = require('express-recaptcha');
var braintree = require("braintree");

var Handlebars = require("handlebars");
var MomentHandler = require("handlebars.moment");
MomentHandler.registerHelpers(Handlebars);

var app = express.Router();

//set the plugin controller directory
var directory =  __dirname +'/'
var app = express();

///////////////////////////////
////       ROUTING        //// 
/////////////////////////////
//Set Handlebars view directory for plugins
app.set('views', path.join(__dirname, 'views/'));

// Controllers

var userController = require(directory+'controllers/user');
var contactController = require(directory+'controllers/contact');
var organizationController = require(directory+'controllers/organization');
var braintreeController = require(directory+'controllers/braintree');
var braintreeOrgController = require(directory+'controllers/braintree_org');
var paypalController = require(directory+'controllers/paypal'); 
var payfastController = require(directory+'controllers/payfast'); 
var payfastOrgController = require(directory+'controllers/payfastorg'); 


// Passport OAuth strategies
require(directory+'controllers/passport');


///////////////////////////   THESE ROUTES CAN BE REMOVED FOR CUSTOM SITES   ///////////////////////////
var fraternateController = require(directory+'controllers/fraternatepages'); 
/////////////////////////////////
////       TEMPALTES        //// 
///////////////////////////////
app.get('/privacy', fraternateController.privacy);
app.get('/terms', fraternateController.terms);
app.get('/introduction', fraternateController.introduction);
app.get('/troubleshooting', fraternateController.troubleshooting);
app.get('/installation', fraternateController.installation);
app.get('/payments', fraternateController.payments);
app.get('/integration', fraternateController.integration);
app.get('/licence', fraternateController.licence);
app.get('/specifications', fraternateController.specifications);
app.get('/payments-paypal', fraternateController.payments_paypal);
app.get('/payments-payfast', fraternateController.payments_payfast);
app.get('/domain', fraternateController.domain);
///////////////////////////   THESE ROUTES CAN BE REMOVED FOR CUSTOM SITES   ///////////////////////////



 

///////////////////////////////////////////////////
////        USER INTERFACE CONTROLLER         //// 
/////////////////////////////////////////////////
//Static
app.get('/users/', userController.users);
app.get('/users/:username/',   organizationController.userorganizations,  userController.profile);
app.get('/users/:username/settings/:page',   organizationController.userorganizations, userController.page);


/////////////////////////////////////
////       ORGANIZATION         //// 
///////////////////////////////////
//Static
app.get('/organizations', organizationController.orglist);
app.get('/organizations/new', organizationController.neworg);


///////////////////////////////////////////////////
////       ORGANIZATION PAYFAST ROUTES        //// 
/////////////////////////////////////////////////

var orgput = [
      check('email').isEmail().normalizeEmail({ remove_dots: false }).withMessage('Invalid email address.'),
]
var orgnew = [
      check('name').not().isEmpty().withMessage('Your orginazation name cannot be blank.'),
      check('email').isEmail().normalizeEmail({ remove_dots: false }).withMessage('Invalid email address.'),
]

app.get('/organizations/new-payfast', organizationController.neworgpayfast);
app.get('/organizations/new-payfast-step2/:orgname/',  organizationController.neworgpayfast_step2);
app.get('/organizations/new-payfast-step3/:orgname/', organizationController.neworgpayfast_step3);


app.post('/payment_org_notify', payfastOrgController.payment_notify)
app.get('/payment_org_finished/:orgname/', payfastOrgController.payment_finished)
app.get('/payment_org_cancel_req', payfastOrgController.payment_cancel_req)
app.get('/payment_org_cancelled', payfastOrgController.payment_cancelled)



app.post('/organizations/new', orgnew, organizationController.createorgstatic);

app.get('/organizations/:orgname/', organizationController.ajaxorguserread ,  organizationController.organizationpermission,  organizationController.orgowneruserdetail,  organizationController.orgprofile);
app.get('/organizations/:orgname/settings',organizationController.ajaxorguserread , organizationController.organizationpermission, organizationController.settings);
app.get('/organizations/:orgname/people', organizationController.ajaxorguserread ,organizationController.organizationpermission,organizationController.orgowneruserdetail,organizationController.people);
app.get('/organizations/:orgname/settings',organizationController.ajaxorguserread , organizationController.organizationpermission, organizationController.settings);
app.get('/organizations/:orgname/settings/:page', organizationController.ajaxorguserread ,organizationController.organizationpermission,  organizationController.page);
app.get('/organizations/:orgname/settings/billing/billing_managers/new', organizationController.ajaxorguserread ,organizationController.organizationpermission,  organizationController.billing_managers);
app.put('/organizations/:orgname',orgput, userController.ensureAuthenticated, organizationController.organizationpermission, organizationController.orgPut);
app.get('/leaveorganiztion/:ids',  organizationController.leaveorganiztion);
app.get('/deleteorganiztion/:ids',  organizationController.deleteorganiztion);
app.get('/orgsharerequest/:orgname',organizationController.orgsharerequest, organizationController.organizationpermission,    organizationController.orgprofile);
app.get('/organizations/:orgname/kickorg/:username/',  organizationController.kickorg);
app.get('/organizations/:orgname/approvereq/:username/', organizationController.approvereq );
app.get('/organizations/:orgname/usersearch/:username/', organizationController.usersearch );
app.get('/organizations/:orgname/billing_managersearch/:username/', organizationController.billing_managersearch );
app.get('/organizations/:orgname/kickbilling/:username/',  organizationController.kickbilling);
//Ajax
app.get('/orguserread', organizationController.orguserread); // Get the active user organizations , owner and member.
app.get('/organizations/:orgname/add_manager/:username/', organizationController.add_manager ); // ajax call to add a billing manager to the organization.




////////////////////////////////////////
////        PAYPAL - USERS         //// 
//////////////////////////////////////
app.get('/users/:username/settings/billing/upgrade_paypal', paypalController.upgrade);
app.get('/success', paypalController.success);
app.get('/paypalipn', paypalController.paypalipn);


////////////////////////////////////////
////        PAYFAST - USERS         //// 
//////////////////////////////////////
app.get('/users/:username/settings/billing/upgrade_payfast', payfastController.upgrade);
app.post('/payment_notify', payfastController.payment_notify)
app.get('/payment_finished', payfastController.payment_finished)
app.get('/payment_cancel_req', payfastController.payment_cancel_req)
app.get('/payment_cancelled', payfastController.payment_cancelled)


///////////////////////////////////////////
////        BRAINTREE - USERS         //// 
/////////////////////////////////////////
app.get('/transactions', braintreeController.transactions);
app.get('/transaction_history_all', braintreeController.transaction_history_all);
app.get('/subscription_history_all', braintreeController.subscription_history_all);
app.get('/users/:username/settings/billing/upgrade', braintreeController.upgrade);
app.get('/users/:username/settings/billing/upgrade_plan_2', braintreeController.upgrade_plan_2);
app.post('/users/:username/subscription', braintreeController.subscription);
app.post('/users/:username/subscription_plan_2', braintreeController.subscription_plan_2);
app.get('/users/:username/cancel_subscription', braintreeController.cancel_subscription);
app.get('/users/:username/transaction_history', braintreeController.transaction_history);
app.get('/users/:username/subscription_history', braintreeController.subscription_history);
app.post('/users/:username/vault', braintreeController.vault);
app.post('/users/:username/vaultupdate', braintreeController.vaultupdate);
app.get('/users/deletepaymentdetails/:ids',  braintreeController.deletepaymentdetails);
app.get('/users/:username/settings/billing/payment', braintreeController.payment);


///////////////////////////////////////////////////
////        BRAINTREE - ORGANIZATIONS         //// 
/////////////////////////////////////////////////
app.get('/organizations/:orgname/settings/billing/upgrade',organizationController.ajaxorguserread ,organizationController.organizationpermission,   braintreeOrgController.upgrade);
app.get('/organizations/:orgname/settings/billing/upgrade_plan_2',organizationController.ajaxorguserread ,organizationController.organizationpermission,   braintreeOrgController.upgrade_plan_2);
app.post('/organizations/:orgname/subscription', organizationController.ajaxorguserread ,organizationController.organizationpermission,braintreeOrgController.subscription);
app.post('/organizations/:orgname/subscription_plan_2', organizationController.ajaxorguserread ,organizationController.organizationpermission,braintreeOrgController.subscription_plan_2);
app.get('/organizations/:orgname/cancel_subscription', braintreeOrgController.cancel_subscription);
app.get('/organizations/:orgname/transaction_history', braintreeOrgController.transaction_history);
app.get('/organizations/:orgname/subscription_history', braintreeOrgController.subscription_history);
app.post('/organizations/:orgname/vault', braintreeOrgController.vault);
app.post('/organizations/:orgname/vaultupdate', braintreeOrgController.vaultupdate);
app.get('/organizations/deletepaymentdetails/:ids',  braintreeOrgController.deletepaymentdetails);
app.get('/organizations/:orgname/settings/billing/payment', organizationController.ajaxorguserread ,organizationController.organizationpermission,  braintreeOrgController.payment);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////                                                            USER                                                                        //// 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Express validator middleware

//Home Page.
var usersignupcheck = [
            check('username').not().isEmpty().withMessage('Your username cannot be blank.'),
            check('email').isEmail().normalizeEmail({ remove_dots: false }).withMessage('Invalid email address.'),
            check('password').isLength(8).withMessage('Passwords must be 8 characters or more.')
]
var accountputcheck = [
      check('username').not().isEmpty().withMessage('Your username cannot be blank.'),
]
var orgput = [
      check('email').isEmail().normalizeEmail({ remove_dots: false }).withMessage('Invalid email address.'),
]


app.post('/contact', contactController.contactPost);
app.get('/account', userController.ensureAuthenticated, userController.accountGet);
app.put('/account',accountputcheck ,userController.ensureAuthenticated, userController.accountPut);
app.delete('/account', userController.ensureAuthenticated, userController.accountDelete);
app.get('/signup', userController.signupGet);
app.get('/signup-step2', userController.signup_step2);
app.get('/signup-step3', userController.signup_step3);






app.post('/signup',usersignupcheck ,userController.signupPost);
app.get('/signin/', userController.loginGet);
app.get('/signin/:redirect', userController.loginGet);
app.post('/signin', userController.loginPost);
app.get('/forgot', userController.forgotGet);
app.post('/forgot', userController.forgotPost);
app.get('/reset/:token', userController.resetGet);
app.post('/reset/:token', userController.resetPost);
app.get('/signout', userController.signout);
app.get('/profilepic/:ids', userController.validatorUser,userController.profilepic);
app.get('/unlink/:provider', userController.ensureAuthenticated, userController.unlink);

app.get('/auth/google', passport.authenticate('google', { scope: 'profile email' }));
app.get('/auth/google/callback', passport.authenticate('google', { successRedirect: '/', failureRedirect: '/signin' }));

app.get('/auth/github', passport.authenticate('github', { scope: [ 'user:email profile repo' ] }));
app.get('/auth/github/callback', passport.authenticate('github', { successRedirect: '/', failureRedirect: '/signin' }));




//Home Controller
app.get('/',organizationController.userorganizations);


//last line
module.exports = app;