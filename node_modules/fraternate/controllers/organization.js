var organizationalModel      = require('../models/organizations.js');
var User = require('../../../models/User');
var ObjectId = require('mongodb').ObjectID;
var express = require('express');
var app = express();
var braintree = require("braintree");
const { check, validationResult } = require('express-validator');
var helpers = require('handlebars-helpers')();
//set the plugin controller directory
var directory =  '../'
////////////////////////////////////////////
///////   BRAINTREE INTEGRATION    ////////
//////////////////////////////////////////
var gateway = braintree.connect({
  environment: braintree.Environment.Sandbox,
  merchantId: process.env.MERCHANTID,
  publicKey: process.env.PUBLICKEY,
  privateKey: process.env.PRIVATEKEY
});


///////////////////////////////////////////////
////     SET YOUR APP.JSON DETAILS        //// 
/////////////////////////////////////////////
//Not working ? try double dots on the json url..
var myModule = require('../../../app.json');
var sitename = myModule.sitename
var website = myModule.website
var repo = myModule.repo


///////////////////////////////////////////////
////     PULL IN PAYFAST VARIABILES.      //// 
/////////////////////////////////////////////
var URLPAYFAST = process.env.URLPAYFAST
var MERCHANTIDPAYFAST = process.env.MERCHANTIDPAYFAST
var MERCHANTKEYPAYFAST = process.env.MERCHANTKEYPAYFAST


////////////////////////////////////////////
/////  GO TO PAGE NEW ORGANIZATION    ///// 
//////////////////////////////////////////
exports.neworg = function(req, res) {
    //Perform Routing for Varios user type on the home page.
    if (req.user) {
      //Create client token for Braintree payments.
      gateway.clientToken.generate({}, function (err, response) {
       res.render(directory+'views/neworg',{
        pagetitle: 'New Organizationsssssss | '+sitename ,
        sitename : sitename,
        siteName : sitename,
        clientToken : response.clientToken,
        layout:false,
        bs4:true
      })
     });
    } else {
      res.redirect('/signin');
    }
  }; 

////////////////////////////////////////////////////////////////
/////  GO TO PAGE NEW ORGANIZATION WITH PAYFAST ROUTING   ///// 
//////////////////////////////////////////////////////////////
exports.neworgpayfast = function(req, res) {
  if (req.user) {
   res.render(directory+'views/neworg-payfast',{
    pagetitle: 'Create Organization | '+sitename ,
    sitename : sitename,
    siteName : sitename,
    website : website,
    layout:false,        
    bs4:true
  })
 } else {
  res.redirect('/signin');
}
}; 

////////////////////////////////////////////////////////////////
/////  GO TO PAGE NEW ORGANIZATION WITH PAYFAST ROUTING   ///// 
//////////////////////////////////////////////////////////////
exports.neworgpayfast_step2 = function(req, res) {
  if (req.user) {
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/neworg-payfast-step2',{
          owner:req.owner,
          ownerParse:req.ownerParse,
          members:req.members ,
          membersParse:req.membersParse,
          requests:req.requests ,
          requestsParse:req.requestsParse,
          orgowner : req.orgowner ,
          orgmember : req.orgmember ,
          orgsharerequest : req.orgsharerequest,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: username.entry.name + ' | '+sitename ,
          sitename : sitename,
          siteName : sitename,
          website : website,
          URLPAYFAST : URLPAYFAST,
          MERCHANTIDPAYFAST : MERCHANTIDPAYFAST,
          MERCHANTKEYPAYFAST : MERCHANTKEYPAYFAST,
          layout:false,
          bs4:true
        }
        )
      } else {
        return res.redirect('/');
      }
    }).lean()
  } else {
    res.redirect('/signin');
  }
}; 

////////////////////////////////////////////////////////////////
/////  GO TO PAGE NEW ORGANIZATION WITH PAYFAST ROUTING   ///// 
//////////////////////////////////////////////////////////////
exports.neworgpayfast_step3 = function(req, res) {
  if (req.user) {
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/neworg-payfast-step3',{
          owner:req.owner,
          ownerParse:req.ownerParse,
          members:req.members ,
          membersParse:req.membersParse,
          requests:req.requests ,
          requestsParse:req.requestsParse,
          orgowner : req.orgowner ,
          orgmember : req.orgmember ,
          orgsharerequest : req.orgsharerequest,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: username.entry.name + ' | '+sitename ,
          sitename : sitename,
          siteName : sitename,
          website : website,
          layout:false,
          bs4:true
        }
        )
      } else {
        return res.redirect('/');
      }
    }).lean()
  } else {
    res.redirect('/signin');
  }
}; 



///////////////////////////////////////////////
///////   CREATE ORGaNIZATION STATIC  ////////
/////////////////////////////////////////////
exports.createorgstatic = function(req, res) {
 if (req.user) {
   
  var errors = validationResult(req);
  if (!errors.isEmpty()) {
    req.flash('errors',errors);
    return res.redirect('/organizations/new-payfast');
  }

  var result = req.body.name
  var result =   result.replace(/ /gi, '-')
  result = result.toLowerCase();
  req.body.name = result

    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.body.name }, function(err, username) {
      if (username) {
        req.flash('error', { msg: 'The Organizational name you have entered is already associated with another account.' });
        return res.redirect('/organizations/new-payfast');
      }
      var temp = {}
      temp['entry'] ={
        name: req.body.name,
        email: req.body.email,
        password: req.body.password,
        owner : req.user.username,
        members : '',
        business_billing_name :req.body.business_billing_name
      }        
      orgs = new organizationalModel(temp);
      orgs.save(function(err) {
        if (err) {
          console.log('save error')
        }
        return res.redirect('/organizations/new-payfast-step2/'+req.body.name);
      });
    });
  } else {
   res.redirect('/signin');
 }
}

////////////////////////////////////////////
////////// PROFILE ORGANIATION ////////////
//////////////////////////////////////////
exports.orgprofile = function(req, res) {
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/account/orgprofile',{
          owner:req.owner,
          ownerParse:req.ownerParse,
          members:req.members ,
          membersParse:req.membersParse,
          requests:req.requests ,
          requestsParse:req.requestsParse,
          orgowner : req.orgowner ,
          orgmember : req.orgmember ,
          orgsharerequest : req.orgsharerequest,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: username.entry.name + ' | '+sitename ,
          sitename : sitename,
          siteName : sitename,
          bs4:true
        }
        )
      } else {
        return res.redirect('/');
      }
    }).lean()
  }

////////////////////////////////////////////
////////// PROFILE ORGANIATION ////////////
//////////////////////////////////////////
exports.orguserread = function(req, res) {
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/account/orgprofile',{
          owner:req.owner,
          ownerParse:req.ownerParse,
          members:req.members ,
          membersParse:req.membersParse,
          requests:req.requests ,
          requestsParse:req.requestsParse,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: username.entry.name + ' | '+sitename ,
        }
        )
      } else {
        return res.redirect('/');
      }
    })
  }

////////////////////////////////////////////
////////// PROFILE ORGANIATION ////////////
//////////////////////////////////////////
exports.ajaxorguserread = function(req, res, next) {
  if (req.user) {
    //console.log(req.user)
    var username =  req.user.username
    var query1 = organizationalModel.find(
      {$or: [
        {"entry.members": username },
        {"entry.owner":  username }
        ]}
        ).lean()
    query1.exec(function (err, query1_return) {
      if(err){console.log('Error Here'); return;} 
      req.userorgs = query1_return
      next();
    })
  } else {
   next();
 }
}

//////////////////////////////
//////////  PAGE ////////////
////////////////////////////
exports.page = function(req, res) {
  if (req.orgowner) {
   var template =  req.params.page 
   switch (true){
    case(template=='billing'):
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username.entry.braintreeid) {
        gateway.customer.find(username.entry.braintreeid, function(err, customer) {
          if (username) {
            res.render(directory+'views/orgsettings/'+template,{
              orgowner : req.orgowner ,
              orgmember : req.orgmember ,
              organization : username,
              organizations : req.userorgs ,
              braintree_customer : JSON.stringify(customer),
              pagetitle: 'Settings | '+username.entry.name   ,
              sitename : sitename,
              siteName : sitename,
              bs4:true
            }
            )
          } else {
            return res.redirect('/');
          }
        }).lean();
      }else{
        res.render(directory+'views/orgsettings/'+template,{
          orgowner : req.orgowner ,
          orgmember : req.orgmember ,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: 'Settings | '+username.entry.name   ,
          sitename : sitename,
          siteName : sitename,
          bs4:true
        })
      }
    }).lean()
    break;      
    default:
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/orgsettings/'+template,{
          orgowner : req.orgowner ,
          orgmember : req.orgmember ,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: 'Settings | '+username.entry.name   ,
          sitename : sitename,
          siteName : sitename,
          bs4:true
        }
        )
      } else {
        return res.redirect('/');
      }
    }).lean()
    break;
  }
} else {
  return res.redirect('/');
}
};

/////////////////////////////////////
////////// SETTINGS PAGE ///////////
///////////////////////////////////
exports.settings = function(req, res) {
  if (req.orgowner) {
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/orgsettings/settings',{
          orgowner : req.orgowner ,
          orgmember : req.orgmember ,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: 'Settings | '+username.entry.name   ,
          sitename : sitename,
          siteName : sitename,
        }
        )
      } else {
        return res.redirect('/');
      }
    }).lean()
  } else {
    return res.redirect('/');
  }
};

//////////////////////////////////////
////////// COMPONENTS PAGE ///////////
/////////////////////////////////////
exports.components = function(req, res) {
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        var ids = '58d371b01373c63dccdee169'
        var Formids = '58aa74140b9d3241280ecf17'
        res.render(directory+'views/orgsettings/components', {
          siteName : siteName,
          items : JSON.stringify(ids),
          Formids : JSON.stringify(Formids),
          organization : username,
          organizations : req.userorgs ,
          pagetitle: 'Components | '+username.entry.name   ,
          sitename : sitename,
        });
      } else {
        return res.redirect('/');
      }
    }).lean()
  };

////////////////////////////////////
////////// ASSEMBLIES PAGE ////////
//////////////////////////////////
exports.assemblies = function(req, res) {
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/orgsettings/assemblies',{
          organization : username,
          organizations : req.userorgs ,
          pagetitle: 'Assemblies | '+username.entry.name   ,
          sitename : sitename,
          siteName : sitename,
        }
        )
      } else {
        return res.redirect('/');
      }
    }).lean()
  };

///////////////////////////////////
////////// PEOPLE PAGE ///////////
/////////////////////////////////
exports.people = function(req, res) {
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/orgsettings/people',{
          owner:req.owner,
          ownerParse:req.ownerParse,
          members:req.members ,
          membersParse:req.membersParse,
          requests:req.requests ,
          requestsParse:req.requestsParse,
          orgowner : req.orgowner ,
          orgmember : req.orgmember ,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: 'People | '+username.entry.name   ,
          sitename : sitename,
          siteName : sitename,
          bs4:true
        }
        )
      } else {
        return res.redirect('/');
      }
    }).lean()
  };

///////////////////////////////////
////////// ORGPUT PAGE ///////////
/////////////////////////////////
exports.orgPut = function(req, res, next) {

  var errors = validationResult(req);
  if (!errors.isEmpty()) {
    req.flash(errors);
    return res.redirect('/organizations/'+req.params.orgname+'/settings/profile');
  }

  organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, organizationItem) {
    organizationalModel.findById(organizationItem._id, function (err, orgid) {
      if (err) return handleError(err);
      if (orgid) { 
        var temp = JSON.parse(JSON.stringify(orgid.entry))
//Assign 
//This can surely be improved.
if (req.body.name !=null) {
  temp.name = req.body.name
}
if (req.body.displayname) {
  temp.displayname = req.body.displayname
}
if (req.body.description) {
  temp.description = req.body.description
}
if (req.body.location) {
  if (req.body.location == -1) {
//do nothing 
} else {
  temp.location = req.body.location 
}
}
if (req.body.url) {
  temp.url = req.body.url
}
if (req.body.business_billing_name) {
  temp.business_billing_name = req.body.business_billing_name
} else {
  delete temp.business_billing_name 
}
if (req.body.email) {
  temp.email = req.body.email
}     
if (req.body.displayemail) {
  temp.displayemail = req.body.displayemail
}       
if (req.body.croppedImg) {
  temp.image = req.body.croppedImg
}      
orgid.entry = temp    
orgid.save(function(err,doc) {
  if (err) {
    req.flash('success', { 
      msg: 'Your profile information has been updated.'
    });
    res.redirect('/organizations/'+req.params.orgname+'/people');
  }
  req.flash('success', { 
    msg: 'Your profile information has been updated.'
  });
  res.redirect('/organizations/'+req.params.orgname+'/people');
});
} else {
  req.flash('error', {
    msg: 'Something went wrong here.'
  });
  res.redirect('/organizations/'+req.params.orgname+'/settings/profile');
}
}).lean();
  }).lean()
};

///////////////////////////////////////////
//////////  ORGANIZATION LIST ////////////
/////////////////////////////////////////
exports.orglist = function(req, res) {
  organizationalModel.find(  function(err, username) {
    res.render(directory+'views/orginizationlist',{
      username : username,
      pagetitle: 'Organizations | '+sitename+'',
      sitename : sitename,
      siteName : sitename,
      bs4 : true,
    });
  }).lean();
};

////////////////////////////////////////////
//////////  ORGANIZATION LEAVE ////////////
//////////////////////////////////////////
exports.leaveorganiztion = function(req, res) {
  if (req.user) {
    organizationalModel.findOne( {"entry.name" : req.params.ids}, function(err, organization) {
      var temp = JSON.parse(JSON.stringify(organization.entry))
      if (temp.owner == req.user.username) {
        temp.owner = ''
      }
      var tempArry =[]  
      for (var i = 0; i < temp.members.length; i++) {
        if (temp.members[i] == req.user.username) {
        } else {
          tempArry.push(temp.members[i])
        }
      }
      temp.members = tempArry
      organization.entry = temp    
      organization.save(function(err) {
        req.flash('success', { msg: 'You are no longer a member of the organization '+organization.entry.name+'.' });
        res.redirect('/users/'+req.user.username+'/settings/organizations');
      });
    }).lean();
  } else {
    return res.redirect('/');
  }
};

////////////////////////////////////////////
//////////  ORGANIZATION KICK  ////////////
//////////////////////////////////////////
exports.kickorg = function(req, res) {
  if (req.user) {
    organizationalModel.findOne( {"entry.name" : req.params.orgname}, function(err, organization) {
      var temp = JSON.parse(JSON.stringify(organization.entry))
      if (temp.owner == req.user.username) {
        var tempArry =[]  
        for (var i = 0; i < temp.members.length; i++) {
          if (temp.members[i] == req.params.username) {
          } else {
            tempArry.push(temp.members[i])
          }
        }
        temp.members = tempArry
        organization.entry = temp    
        organization.save(function(err) {
          req.flash('success', { msg: req.params.username+' was successfully removed from '+organization.entry.name+'.' });
          res.redirect('/organizations/'+organization.entry.name+'/people' );
        });
      } else {
        return res.redirect('/');
      }
    }).lean();
  } else {
    return res.redirect('/');
  }
};

////////////////////////////////////////////////////////////
//////////  ORGANIZATION KICK BILLING MANAGER  ////////////
//////////////////////////////////////////////////////////
exports.kickbilling = function(req, res) {
  if (req.user) {
    organizationalModel.findOne( {"entry.name" : req.params.orgname}, function(err, organization) {
      var temp = JSON.parse(JSON.stringify(organization.entry))
      if (temp.owner == req.user.username) {
        var tempArry =[]  
        for (var i = 0; i < temp.billing_managers.length; i++) {
          if (temp.billing_managers[i] == req.params.username) {
          } else {
            tempArry.push(temp.billing_managers[i])
          }
        }
        temp.billing_managers = tempArry
        organization.entry = temp    
        organization.save(function(err) {
          req.flash('success', { msg: req.params.username+' was successfully removed from '+organization.entry.name+' as a billing manager.' });
          res.redirect('/organizations/'+organization.entry.name+'/settings/billing' );
        });
      } else {
        return res.redirect('/');
      }
    }).lean();
  } else {
    return res.redirect('/');
  }
};

////////////////////////////////////////////
//////////  ORGANIZATION DELETE  ////////////
//////////////////////////////////////////
exports.deleteorganiztion = function(req, res) {
  if (req.user) {
    organizationalModel.remove( {"_id" : req.params.ids}, function(err) {
      if(err){console.log('Error Here'); return;} 
      req.flash('success', { msg: 'Organization deleted.' });
      res.redirect('/users/'+req.user.username);
    })
  } else {
    return res.redirect('/');
  }
};


////////////////////////////////////////////////////////////////
//////////  ORGANIZATION APPROVE USER JOIN REQUEST  ///////////
//////////////////////////////////////////////////////////////
exports.approvereq = function(req, res) {
  if (req.user) {
    var query1 = organizationalModel.findOne(
      {"entry.name":  req.params.orgname }
      ).lean()
    query1.exec(function (err, query1_return) {
      if(err){console.log('Error Here'); return;} 
      if (query1_return.entry.owner == req.user.username ) {
        //Painful parse issue.
        var temp = JSON.parse(JSON.stringify(query1_return.entry))
//Invite and accept request in 1 query , where there is an error trap for multiple added users.
var count=0
if (temp.members) {
  for (var i = 0; i < temp.members.length; i++) {
    temp.members[i]
    if (req.params.username == temp.members[i]) {
      count+=1
    }
  }
  if (count==0) {
    temp.members.push(req.params.username)
  }
} else {
  temp.members = [req.params.username]
}
if (temp.requests) {
//delete request
var temp1 =[]
for (var i = 0; i < temp.requests.length; i++) {
  if (temp.requests[i] == req.params.username) {
  } else {
    temp1.push(temp.requests[i])
  }
}
}
temp.requests = temp1
query1_return.entry = temp
req.params.options ='join'
query1_return.save(function(err) {
  return res.redirect('/');
}); 
} else {
  console.log('User name and organization owner do not match.')
  return res.redirect('/');
}
})
  } else {
    return res.redirect('/');
  }
};

////////////////////////////////////////////
//////////  ADD BILLING MANAGER ///////////
//////////////////////////////////////////
exports.add_manager = function(req, res) {
  console.log('is this working')
  if (req.user) {
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, organization) {
      var temp = JSON.parse(JSON.stringify(organization.entry))
      var count = 0
      if (temp['billing_managers']) {
        for (var i = temp['billing_managers'].length - 1; i >= 0; i--) {
          if(temp['billing_managers'][i] == req.params.username) {
            return res.send({ msg: '<div class="alert alert-warning" role="alert"> <strong>Warning!</strong> This user is already a billing manager for this organization.</div>' });
          } 
        }
        temp['billing_managers'].push(req.params.username)
      } else {
        temp.billing_managers = []
        temp.billing_managers.push(req.params.username)
      }
      organization.entry = temp
      organization.save(function(err,doc) {
        return res.send({ msg: '<div class="alert alert-success" role="alert"> <strong>Completed!</strong> '+req.params.username+' has been added as a billing manager to this organization. </div>' });
      });
    }).lean();
  } else {
   res.redirect('/signin');
 }
};

//////////////////////////////////////////
//////////  BILLING MANAGERS ////////////
////////////////////////////////////////
exports.billing_managers = function(req, res) {
  if (req.orgowner) {
   var template =  req.params.page 
    //check the user name for duplicate.
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, username) {
      if (username) {
        res.render(directory+'views/orgsettings/billing_manager',{
          orgowner : req.orgowner ,
          orgmember : req.orgmember ,
          organization : username,
          organizations : req.userorgs ,
          pagetitle: 'Settings | '+username.entry.name   ,
          sitename : sitename,
          siteName : sitename,
        }
        )
      } else {
        return res.redirect('/');
      }
    }).lean()
  } else {
    return res.redirect('/');
  }
};




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Middelware -  Limit to 1 query.


////////////////////////////////////
////////// PROFILE PAGE ////////////
///////////////////////////////////
exports.userorganizations = function(req, res, next) {
  //Work around for the home controller with out paramater request
  if (req.user) { 
    if (!req.params.username) { 
      req.params.username = req.user.username
    }
  }
  var query1 = organizationalModel.find(
    {"entry.owner":  req.params.username }
    ).lean()
  var query2 = organizationalModel.find(
    {"entry.members": req.params.username }
    ).lean()
  query1.exec(function (err, query1_return) {
    query2.exec(function (err, query2_return) {
      if(err){console.log('Error Here'); return;} 
      req.organizations = query2_return
      req.organizations.push.apply(req.organizations, query1_return)
      req.organizationsParse = JSON.stringify(req.organizations)
      next();
       //Query end
     })
  })
};


////////////////////////////////////////////////
////////// ORGANIZATION PERMISSION ////////////
//////////////////////////////////////////////
exports.organizationpermission = function(req, res, next) {
  //Work around for the home controller with out paramater request
  if (req.user) { 
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, organization) {
      //Check if this user is an owner of this organization
      console.log(organization)
      if (organization.entry.owner) {
        if (organization.entry.owner == req.user.username) {
          req.orgowner = true 
        }
      }
      //Check if this user is a memeber
      if (organization.entry.members) {
        for (var i = 0; i < organization.entry.members.length; i++) {
          if (organization.entry.members[i] == req.user.username) {
            req.orgmember = true 
          }
        }
      }
      //Check if this user has requested membership to this organization
      if (organization.entry.requests) {
        for (var i = 0; i < organization.entry.requests.length; i++) {
          if (organization.entry.requests[i] == req.user.username) {
            req.orgsharerequest = true 
          }
        }
      }
      next();
    }) .lean()
  } else {
    next();
  }
};  

///////////////////////////////////////////////////
//////////  ORGANIZATION SHARE REQUEST ///////////
/////////////////////////////////////////////////
exports.orgsharerequest = function(req, res, next) {
  if (req.user) {
    organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, organization) {
      var temp = JSON.parse(JSON.stringify(organization.entry))
      if (temp['requests']) {
        temp['requests'].push(req.user.username)
      } else {
        temp.requests = []
        temp.requests.push(req.user.username)
      }
      organization.entry = temp
      organization.save(function(err,doc) {
        req.flash('success', { msg: 'Your request has been sent to the organization owner.' });
        next();
      });
    }).lean();
  } else {
   res.redirect('/signin');
 }
};

////////////////////////////////////////////////////////////////////
//////////  ORGANIZATIONAL OWNER GET FULL USER DETAILS  ///////////
//////////////////////////////////////////////////////////////////
exports.orgowneruserdetail = function(req, res, next) {
  organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, organization) {
    if(err){console.log('Error Here'); return;} 
    if (organization) {
     User.findOne({ 'username': organization.entry.owner }).lean().exec(function(err, user) {
      if(err){console.log('Error Here2'); return;} 
      User.find({ 'username': organization.entry.members }).lean().exec(function(err, user1) {
        if(err){console.log('Error Here3'); return;} 
        User.find({ 'username': organization.entry.requests }).lean().exec(function(err, user2) {
          if(err){console.log('Error Here4'); return;} 
          req.owner = user
          req.ownerParse = JSON.stringify(user)
          req.members = user1
          req.membersParse = JSON.stringify(user1)
          req.requests = user2
          req.requestsParse = JSON.stringify(user2)
          next();
        })
      })
    })
   } else {
    next();
  }
}).lean()
};

////////////////////////////////
//////////  SEARCH ////////////
//////////////////////////////
exports.usersearch = function(req, res) {
  if (req.user) {
   req.sanitize('username').escape();
   req.sanitize('username').trim();
   var myExp = new RegExp(req.param('username'), 'i');
   organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, organization) { 
     var query1 = User.find(
      {"username" : {
        $regex : myExp,
        $ne: req.user.username ,
        $nin: organization.entry.members ,
      }
    }
    ).limit(10)
     query1.exec(function (err, query1_return) {
      if(err){
        res.send("No user found");
        return;} 
        res.send(
          { users : query1_return}
          );
      });
   }).lean()
 } else {
   res.redirect('/');
 }
};

////////////////////////////////////////////////
//////////  BILLING MANAGER SEARCH ////////////
//////////////////////////////////////////////
exports.billing_managersearch = function(req, res) {
  if (req.user) {
   req.sanitize('username').escape();
   req.sanitize('username').trim();
   var myExp = new RegExp(req.param('username'), 'i');
   organizationalModel.findOne({ 'entry.name': req.params.orgname }, function(err, organization) { 
     var query1 = User.find(
      {"username" : {
        $regex : myExp,
        $ne: req.user.username ,
        $nin: organization.entry.billing_managers ,
      }
    }
    ).limit(10).lean()
     query1.exec(function (err, query1_return) {
      if(err){
        res.send("No user found");
        return;} 
        res.send(
          { users : query1_return}
          );
      });
   }).lean
 } else {
   res.redirect('/');
 }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ORGANIZATION EMAIL MANAGER.


///////////////////////////////////////
////     SIGN UP EMAIL SEND       //// 
/////////////////////////////////////
function signupEmail(username , email,subject , msg){
  var port = process.env.MAIL_PORT
  var useremail = process.env.MAIL_USERNAME
  var passwords = process.env.MAIL_PASSWORD
  var host = process.env.MAIL_HOST
  var temp = {}
  'use strict';
  var nodemailer = require('nodemailer');
// create reusable transporter object using the default SMTP transport
var transporter = nodemailer.createTransport({
  host: host,
  tls: {
    rejectUnauthorized: false
  },
    secure: false, // secure:true for port 465, secure:false for port 587
    auth: {
      user: useremail,
      pass: passwords,
    }
  }); 
var mailOptions = {
  from: username + ' ' + '<'+ email + '>', // sender address
  to: process.env.MAIL_USERNAME, // list of receivers
  subject: '✔ Your organization account modification was successfully completed | '+ sitename, // Subject line
  html:  'Organization account modification :' + username + ' email : ' +  email,
}
// send mail with defined transport object
transporter.sendMail(mailOptions, (error, info) => {
  if (error) {
    return console.log(error);
  }
  var mailOptions = {
  from: 'The '+sitename+' Team' + ' ' + '<'+ process.env.MAIL_USERNAME + '>', // sender address
  to: email, // list of receivers
  subject: subject, // Subject line
  html:  msg, //HTML msg body
}
transporter.sendMail(mailOptions, (error, info) => {
  if (error) {
    return console.log(error);
  }
});
});
}