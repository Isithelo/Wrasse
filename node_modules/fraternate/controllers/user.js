var async = require('async');
var crypto = require('crypto');
var nodemailer = require('nodemailer');
var passport = require('passport');
var User = require('../../../models/User');
var recaptcha = require('express-recaptcha');
var braintree = require("braintree");
const { check, validationResult } = require('express-validator');
var helpers = require('handlebars-helpers')();

recaptcha.init(process.env.SITE_KEY, process.env.SECRET_KEY);
//set the plugin controller directory
var directory =  '../'


///////////////////////////////////////////////
////     JEST TESTING CONFIGURATION       //// 
/////////////////////////////////////////////
//Not working ? try double dots on the json url
exports.testingcheck = function(req, res) {
        return 3;
      };
 


///////////////////////////////////////////////
////     SET YOUR APP.JSON DETAILS        //// 
/////////////////////////////////////////////
//Not working ? try double dots on the json url..
var myModule = require('../../../app.json');
var sitename = myModule.sitename
var website = myModule.website
var repo = myModule.repo
var sitekey = process.env.SITE_KEY
////////////////////////////////////////////
///////   BRAINTREE INTEGRATION    ////////
//////////////////////////////////////////
var gateway = braintree.connect({
  environment: braintree.Environment.Sandbox,
  merchantId: process.env.MERCHANTID,
  publicKey: process.env.PUBLICKEY,
  privateKey: process.env.PRIVATEKEY
});

/////////////////////////////////////////
///////   PAYFAST INTEGRATION    ///////
////////////////////////////////////////
var payfastaccount = {
  merchantIdpayfast: process.env.MERCHANTIDPAYFAST,
  merchantkeypayfast: process.env.MERCHANTKEYPAYFAST,
  passphrasepayfast: process.env.PASSPHRASEPAYFAST,
};

///////////////////////////////////////////////
////     PULL IN PAYFAST VARIABILES.      //// 
/////////////////////////////////////////////
var URLPAYFAST = process.env.URLPAYFAST
var MERCHANTIDPAYFAST = process.env.MERCHANTIDPAYFAST
var MERCHANTKEYPAYFAST = process.env.MERCHANTKEYPAYFAST


/**
 * AJAX IN USER PROFILE PIC
 */
 exports.profilepic = function(req, res) {
  var ids = req.query['ids']
  if (!ids) {
    ids =''
  }  
          //check the user name for duplicate.
          User.findOne({ _id: ids }, function(err, username) {
            if(err){console.log('Error Here get collectionsdata'); return;}
            res.send(JSON.stringify(username))
          }).lean();
        };
/**
 * Login required middleware
 */
 exports.ensureAuthenticated = function(req, res, next) {
  if (req.isAuthenticated()) {
    next();
  } else {
    res.redirect('/signin');
  }
};

/**
 * GET /login
 */
 exports.loginGet = function(req, res) {
  if (req.user) {
    return res.redirect('/');
  }
  res.render(directory+'views/account/signin', {
    pagetitle: 'Sign in | '+sitename+'',
    sitename : sitename,
    siteName : sitename,
    sitekey : sitekey,
    bs4 : true,
    layout:false
  });
};

/**
 * POST /login
 */
 exports.loginPost = function(req, res, next) {
  check('email', 'Email is not valid').isEmail();
  check('email', 'Email cannot be blank').notEmpty();
  check('password', 'Password cannot be blank').notEmpty();
  check('email', 'Email is invalid').normalizeEmail();
  var errors =  validationResult(req);
  if (!errors.isEmpty()) {
    req.flash('error', errors);
    return res.redirect('/signin');
  }
  passport.authenticate('local', function(err, user, info) {
    if (!user) {
      req.flash('error', info);
      return res.redirect('/signin')
    }
    req.logIn(user, function(err) {
      res.redirect('/');
    });
  })(req, res, next);
};

/**
 * GET /signout
 */
 exports.signout = function(req, res) {
  req.logout();
  res.redirect('/');
};

/**
 * GET /signup
 */
 exports.signupGet = function(req, res) {
  if (req.user) {
    return res.redirect('/');
  }
  res.render(directory+'views/account/signup', {
    pagetitle: 'Sign up | '+sitename+'',
    sitename : sitename,
    siteName : sitename,
    sitekey : sitekey,
    layout:false,
    bs4:true
  });
};

/**
 * GET /signup-step2
 */
 exports.signup_step2 = function(req, res) {
  if (!req.user) {
    return res.redirect('/');
  }
  res.render(directory+'views/account/signup-step2', {
    pagetitle: 'Choose your plan | '+sitename+'',
    sitename : sitename,
    siteName : sitename,
    URLPAYFAST : URLPAYFAST,
    website : website,
    MERCHANTIDPAYFAST : MERCHANTIDPAYFAST,
    MERCHANTKEYPAYFAST : MERCHANTKEYPAYFAST,
    sitekey : sitekey,
    layout:false,
    bs4:true
  });
};

/**
 * GET /signup-step3
 */
 exports.signup_step3 = function(req, res) {
  if (!req.user) {
    return res.redirect('/');
  }
  res.render(directory+'views/account/signup-step3', {
    pagetitle: 'Tailor your experience | '+sitename+'',
    sitename : sitename,
    siteName : sitename,
    sitekey : sitekey,
    layout:false,
    bs4:true
  });
};

/**
 * POST /signup
 */
 exports.signupPost = function(req, res, next) {
   recaptcha.verify(req, function(error){
    if(!error){ 

      var errors = validationResult(req);
      console.log(errors)
      if (!errors.isEmpty()) {
        req.flash(errors);
        return res.redirect('/signup');
      }


      //check the email for duplicate.
      User.findOne({ email: req.body.email }, function(err, user) {
        if (user) {
          req.flash('error', { msg: 'The email address you have entered is already associated with another account.' });
          return res.redirect('/signup');
        }
        //check the user name for duplicate.
        User.findOne({ username: req.body.username }, function(err, username) {
          if (username) {
            req.flash('error', { msg: 'The username you have entered is already associated with another account.' });
            return res.redirect('/signup');
          }
          user = new User({
            username: req.body.username,
            email: req.body.email,
            password: req.body.password,
            permission : 'user'
          });
          user.save(function(err) {
            req.logIn(user, function(err) {
              res.redirect('/signup-step2');
            });
          });
        });
      });


    } else { 
      req.flash('error', { msg: 'Heads up , You may very well be a robot.' });
      return res.redirect('/signup');
    }



  })
 };

/**
 * GET /account
 */
 exports.accountGet = function(req, res) {
  res.render(directory+'views/account/profile', {
    pagetitle: 'My Account | '+sitename+'',
    sitename : sitename,
    siteName : sitename,
    sitekey : sitekey
  });
};

/**
 * PUT /account
 * Update profile information OR change password.
 */

 exports.accountPut = function(req, res, next) {




      var errors = validationResult(req);
  if ('password' in req.body) {
    if (!errors.isEmpty()) {
     req.flash('error', errors);
     return res.redirect('/users/'+user.username+'/settings/profile');
   }
  } 


User.findById(req.user.id, function(err, user) {
  if ('password' in req.body) {
    user.password = req.body.password;
  } else {

    user.email = req.body.email;
    user.name = req.body.name;
    user.lastname = req.body.lastname;
    user.bio = req.body.bio;
    user.firstsignup = '';
    user.image = req.body.croppedImg
      //required for the disabled input area
      if (req.body.username) {
       user.username = req.body.username;
     }
     user.company = req.body.company;


     if ( req.body.location) {
      if ( req.body.location == -1) {
          //do nothing 
        } else {
          user.location =  req.body.location 
        }
      }
      user.website = req.body.website;
      user.publicemail = req.body.publicemail;
    }
    user.save(function(err) {
      if ('password' in req.body) {
        req.flash('success', { msg: 'Your password has been changed.' });
      } else if (err && err.code === 11000) {
        req.flash('error', { msg: 'The email address you have entered is already associated with another account.' });
      } else {
        req.flash('success', { msg: 'Your profile information has been updated.' });
      }
      res.redirect('/users/'+user.username );
    });
  });
};

/**
 * DELETE /account
 */
 exports.accountDelete = function(req, res, next) {
  User.remove({ _id: req.user.id }, function(err) {
    req.logout();
    req.flash('info', { msg: 'Your account has been permanently deleted.' });
    res.redirect('/');
  });
};

/**
 * GET /unlink/:provider
 */
 exports.unlink = function(req, res, next) {
  User.findById(req.user.id, function(err, user) {
    switch (req.params.provider) {
      case 'facebook':
      user.facebook = undefined;
      break;
      case 'google':
      user.google = undefined;
      break;
      case 'twitter':
      user.twitter = undefined;
      break;
      case 'vk':
      user.vk = undefined;
      break;
      case 'github':
      user.github = undefined;
      break;      
      default:
      req.flash('error', { msg: 'Invalid OAuth Provider' });
      return res.redirect('/account');
    }
    user.save(function(err) {
      req.flash('success', { msg: 'Your account has been unlinked.' });
      res.redirect('/account');
    });
  });
};

/**
 * GET /forgot
 */
 exports.forgotGet = function(req, res) {
  res.render(directory+'views/account/forgot', {
    pagetitle: 'Forgot Password | '+sitename+'',
    sitename : sitename,
    siteName : sitename,
  });
};

/**
 * POST /forgot
 */
 exports.forgotPost = function(req, res, next) {
  check('email', 'Email is not valid').isEmail();
  check('email', 'Email cannot be blank').notEmpty();
  check('email', 'Email is invalid').normalizeEmail();

  var errors =  validationResult(req);

  if (!errors.isEmpty()) {
    req.flash('error', errors);
    return res.redirect('/forgot');
  }

  async.waterfall([
    function(done) {
      crypto.randomBytes(16, function(err, buf) {
        var token = buf.toString('hex');
        done(err, token);
      });
    },
    function(token, done) {
      User.findOne({ email: req.body.email }, function(err, user) {
        if (!user) {
          req.flash('error', { msg: 'The email address ' + req.body.email + ' is not associated with any account.' });
          return res.redirect('/forgot');
        }
        user.passwordResetToken = token;
        user.passwordResetExpires = Date.now() + 3600000; // expire in 1 hour
        user.save(function(err) {
          done(err, token, user);
        });
      });
    },
    function(token, user, done) {



///////////   MAIL TRANSPORTER   ///////////
var port = process.env.MAIL_PORT
var useremail = process.env.MAIL_USERNAME
var passwords = process.env.MAIL_PASSWORD
var host = process.env.MAIL_HOST
var transporter = nodemailer.createTransport({
  host: host,
  tls: {
    rejectUnauthorized: false
  },
      secure: false, // secure:true for port 465, secure:false for port 587
      auth: {
        user: useremail,
        pass: passwords,
      }
    }); 
///////////   MAIL TRANSPORTER   ///////////


var mailOptions = {
  to: user.email,
        from: 'The '+sitename+' Team' + ' ' + '<'+ process.env.MAIL_USERNAME + '>', // sender address
        subject: '✔ Reset your password on '+sitename+'',
        text: 'You are receiving this email because you (or someone else) have requested the reset of the password for your account.\n\n' +
        'Please click on the following link, or paste this into your browser to complete the process:\n\n' +
        'http://' + req.headers.host + '/reset/' + token + '\n\n' +
        'If you did not request this, please ignore this email and your password will remain unchanged.\n'
      };
      transporter.sendMail(mailOptions, function(err) {
        req.flash('info', { msg: 'An email has been sent to ' + user.email + ' with further instructions.' });
        res.redirect('/forgot');
      });
    }
    ]);
};

/**
 * GET /reset
 */
 exports.resetGet = function(req, res) {
  if (req.isAuthenticated()) {
    return res.redirect('/');
  }
  User.findOne({ passwordResetToken: req.params.token })
  .where('passwordResetExpires').gt(Date.now())
  .exec(function(err, user) {
    if (!user) {
      req.flash('error', { msg: 'Password reset token is invalid or has expired.' });
      return res.redirect('/forgot');
    }
    res.render(directory+'views/account/reset', {
      pagetitle: 'Password Reset | '+sitename+'',
      sitename : sitename,
      siteName : sitename,
    });
  });
};

/**
 * POST /reset
 */
 exports.resetPost = function(req, res, next) {
  check('password', 'Password must be at least 8 characters long').len(8);
  check('confirm', 'Passwords must match').equals(req.body.password);

  var errors =  validationResult(req);

  if (!errors.isEmpty()) {
    req.flash('error', errors);
    return res.redirect('back');
  }

  async.waterfall([
    function(done) {
      User.findOne({ passwordResetToken: req.params.token })
      .where('passwordResetExpires').gt(Date.now())
      .exec(function(err, user) {
        if (!user) {
          req.flash('error', { msg: 'Password reset token is invalid or has expired.' });
          return res.redirect('back');
        }
        user.password = req.body.password;
        user.passwordResetToken = undefined;
        user.passwordResetExpires = undefined;
        user.save(function(err) {
          req.logIn(user, function(err) {
            done(err, user);
          });
        });
      });
    },
    function(user, done) {
      var transporter = nodemailer.createTransport({
        service: 'Mailgun',
        auth: {
          user: process.env.MAILGUN_USERNAME,
          pass: process.env.MAILGUN_PASSWORD
        }
      });
      var mailOptions = {
        from: 'The '+sitename+' Team' + ' ' + '<'+ process.env.MAIL_USERNAME + '>', // sender address
        to: user.email,
        subject: 'Your '+sitename+' password has been changed',
        text: 'Hello,\n\n' +
        'This is a confirmation that the password for your account ' + user.email + ' has just been changed.\n'
      };
      transporter.sendMail(mailOptions, function(err) {
        req.flash('success', { msg: 'Your password has been changed successfully.' });
        res.redirect('/account');
      });
    }
    ]);
};





////////////////////////////////////
////////// PROFILE PAGE ////////////
///////////////////////////////////
exports.profile = function(req, res) {
 //There is a requirement to limit the form size  , as such send the find and send the headings from the parent.
 var query1 = User.findOne(
 {
  "username" : req.params.username
}).lean()
 query1.exec(function (err, user) { 
  if(err){console.log('Error Here query1'); return;}
  if (user) {
    user.password = 'Kwakwakwa'
    res.render(directory+'views/account/profile', {
      userload : user,
        items:req.items, //list of all '+sitename+' DB entires
        itemsParse:req.itemsParse,//list of all '+sitename+' DB entires
        organizations : req.organizations,
        organizationsParse:req.organizationsParse,
        pagetitle: user.username+' | '+sitename+'',
        sitename : sitename,
        siteName : sitename,
        bs4 : true,
      });

  } else {
   res.redirect('/');
 }
 //Query end
})
};

//////////////////////////////
//////////  PAGE ////////////
////////////////////////////
exports.page = function(req, res) {
  if (req.user) {
    var template =  req.params.page 
    var username =  req.params.username 
    switch (true){
      case(template=='organizations'):
      res.render(directory+'views/settings/'+template,{
        organizations : req.organizations,
        organizationsParse:req.organizationsParse,
        pagetitle: 'Organizations'+' | '+sitename+'',
        sitename : sitename,
        siteName : sitename,
              bs4 : true,
      })
      break;
      case(template=='billing'):
      if (req.user.braintreeid) {
        gateway.customer.find(req.user.braintreeid, function(err, customer) {
          res.render(directory+'views/settings/'+template,{
            pagetitle: 'Billing | '+sitename+'',
            sitename : sitename,
            siteName : sitename,
            braintree_customer : JSON.stringify(customer),
                  bs4 : true,
          })
        });
      } else {
        res.render(directory+'views/settings/'+template,{
          pagetitle: 'Billing | '+sitename+'',
          sitename : sitename,
          siteName : sitename,
                bs4 : true,
        })
      }
      break;      
      case(template=='account'):
      res.render(directory+'views/settings/'+template,{
        pagetitle: 'Account | '+sitename+'',
        sitename : sitename,
        siteName : sitename,
              bs4 : true,
      });
      break;
      default:
      res.render(directory+'views/settings/'+template,{
        pagetitle: 'Profile | '+sitename+'',
        sitename : sitename,
        siteName : sitename,
        payfastaccount : payfastaccount,
        bs4 : true,

      });
      break;
    }
  } else {
   res.redirect('/signin');
 }
};

////////////////////////////////////
//////////  USERS LIST ////////////
//////////////////////////////////
exports.users = function(req, res) {
  User.find(  function(err, username) {
    res.render(directory+'views/userlist',{
      username : username,
      pagetitle: 'Users | '+sitename+'',
      sitename : sitename,
      siteName : sitename,
      bs4 : true,
    });
  }).lean();
};


