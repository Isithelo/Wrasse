var express = require('express');
var path = require('path');
var logger = require('morgan');
var compression = require('compression');
var methodOverride = require('method-override');
var session = require('express-session');
var flash = require('express-flash');
var bodyParser = require('body-parser');
 
var dotenv = require('dotenv');
var exphbs = require('express-handlebars');
var mongoose = require('mongoose');
var passport = require('passport');
var recaptcha = require('express-recaptcha');
var braintree = require("braintree");

var Handlebars = require("handlebars");
var MomentHandler = require("handlebars.moment");
MomentHandler.registerHelpers(Handlebars);
 

//set the plugin controller directory
var directory =  __dirname +'/'
var app = express();


///////////////////////////////
////       ROUTING        //// 
/////////////////////////////
//Set Handlebars view directory for plugins
app.set('views', path.join(__dirname, 'views/'));


var wrasseCreate = require(directory+'controllers/create'); //Creation of new entries
var wrasseRead = require(directory+'controllers/read'); //reading of any data
var wrasseDelete = require(directory+'controllers/delete'); //deleting of data

//Set the CRUD management for the site.
var wrasserouting = {
		'create':[
			{
				'url':'/issues/create',
				'type':'post',
				'route':[ wrasseCreate.create ],
				'description':'Form post of data to create a new issue.'
			},{
				'url':'/issues/new/:parentid',
				'type':'get',
				'route':[ wrasseRead.newissue ],
				'description':'Static HTML page deploy the form.'
			},{
				'url':'/issues/new/',
				'type':'get',
				'route':[ wrasseRead.newissue ],
				'description':'Static HTML page deploy the form.'
			} 
		],
		'read':[
			{
				'url':'/issues/view/:receivedid',
				'type':'get',
				'route':[wrasseRead.getallissues, wrasseRead.readissues ], 
				'description':'Static HTML page deploy of all issues.'
			},{
				'url':'/issues/view/',
				'type':'get',
				'route':[wrasseRead.getallissues, wrasseRead.readissues ], 
				'description':'Static HTML page deploy of all issues.'
			} 
		],
		'update':[
			{
				'url':'/issues/update/:receivedid',
				'type':'get',
				'route':[ wrasseRead.getissue,wrasseRead.updateissue ],
				'description':'Static HTML page deploy the form with data and an id.'
			}
		],
		'delete':[
			{
				'url':'/issues/delete/:receivedid',
				'type':'get',
				'route':[ wrasseDelete.deleteitem ],
				'description':'Single id ajax request to delete a issue.'
			},
		],'ajaxget':[
			{
				'url':'/issues/ajax/:template/:parentid',
				'type':'get',
				'route':[  wrasseRead.gettemplate ],
				'description':'AJAX HTML page deploy the form, blank or with data.'
			},{
				'url':'/issues/ajaxview/:receivedid',
				'type':'get',
				'route':[wrasseRead.getallissues, wrasseRead.readissuesajax ], 
				'description':'AJAX view all table deployment.'
			},{
				'url':'/issues/ajaxview/',
				'type':'get',
				'route':[wrasseRead.getallissues, wrasseRead.readissuesajax ], 
				'description':'AJAX view all table deployment.'
			}  
		],
}
 
app.use(function (req, res, next) {
   res.locals.wrasserouting = wrasserouting
   next();
});
///////////////////////////   THESE ROUTES CAN BE REMOVED FOR CUSTOM SITES   ///////////////////////////
var wrasseHome = require(directory+'controllers/home'); 
/////////////////////////////////
////       TEMPALTES        //// 
///////////////////////////////
app.get('/',[ wrasseRead.getallissues, wrasseHome.index ]); 

///////////////////////////   THESE ROUTES CAN BE REMOVED FOR CUSTOM SITES   ///////////////////////////


//Compile the JSON routing variable into the various site routes.
for (key in wrasserouting){
	for (var i = 0; i < wrasserouting[key].length; i++) {
		wrasserouting[key][i]
		if (wrasserouting[key][i]['type'] == 'get') {

			app.get(wrasserouting[key][i].url, wrasserouting[key][i].route)
			//console.log('\x1b[36m%s\x1b[0m','Loading Post Routes : ',wrasserouting[key][i].url)
			
		} else if (wrasserouting[key][i]['type'] == 'post') {
 
			app.post(wrasserouting[key][i].url, wrasserouting[key][i].route)
			//console.log('\x1b[36m%s\x1b[0m','Loading Post Routes : ',wrasserouting[key][i].url)
		} else{
			
		}
	}
}
 




//last line
module.exports = app;